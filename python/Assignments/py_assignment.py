# -*- coding: utf-8 -*-
"""Py assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tqioi7tWqe5g9OvguNwpEe8LXC2Ti_KK

1) What are the types of Applications?
Certainly! Here are the types of applications listed by name:

1. Utility Applications
2. Productivity Applications
3. Communication Applications
4. Media Applications
5. Entertainment Applications
6. Social Media Applications
7. Educational Applications
8. Financial Applications
9. Travel Applications
10. Health and Fitness Applications
11. Business Applications

2) What is programing?



**Programming** is the process of creating and writing instructions (code) for a computer to execute specific tasks or solve problems. It involves designing algorithms, coding these algorithms using programming languages, debugging to identify and fix errors, and testing to ensure the program operates correctly and meets its objectives. Programming is fundamental to software development and encompasses a range of activities aimed at creating functional and efficient computer programs.

Python is a high-level, interpreted programming language known for its simplicity and readability. Here's a definition:

**Python** is a versatile and widely-used programming language that emphasizes code readability and simplicity. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming styles. Python's design philosophy emphasizes clear, concise syntax, which makes it easy to learn and use, reducing the cost of program maintenance. It is used for various purposes such as web development, data analysis, artificial intelligence, scientific computing, and more, making it a popular choice among developers and organizations worldwide.
"""

4  Write a Python program to check if a number is positive, negative or
zero.

input_number=int(input("enter the number"))
if input_number>0:
  print("positive")
elif input_number<0:
  print("negative")
else:
  print("zero")

"""5)Write a Python program to get the Factorial number of given numbers.

"""

input_number=int(input("enter the number"))
fact=1
for i in range(1,input_number+1):
  fact=fact*i
print(fact)

"""**6**)Write a Python program to get the Fibonacci series of given range.

"""

n = int(input("Enter the range: "))
a = 0
b = 1
count = 0
print(a, b, end=" ")
while count < n - 2:
    c = a + b
    print(c, end=" ")
    a = b
    b = c
    count += 1

"""Memory management in Python is handled automatically by the Python interpreter through a combination of techniques:

1. Reference Counting:

Every object in Python has a reference count, which tracks how many references point to it.
When an object's reference count reaches zero, it means it's no longer in use and the memory it occupies can be reclaimed.
2. Garbage Collection:

Python's garbage collector periodically identifies and removes objects with a reference count of zero, freeing up memory.
It uses a cycle detection algorithm to handle circular references, where objects refer to each other, preventing their reference counts from reaching zero.
3. Memory Pool:

Python maintains a private heap space where objects are allocated.
Small objects are allocated from a pre-allocated pool for efficiency.
In general, you don't need to worry about manual memory management in Python. The interpreter handles it for you, allowing you to focus on writing code. However, understanding these concepts can help you write more efficient code and diagnose potential memory leaks

8)What is the purpose continuing statement in python?
The purpose of the continue statement in Python is to skip the rest of the current iteration in a loop and move on to the next iteration.

When the continue statement is encountered within a loop (like for or while), the remaining code within that iteration is skipped, and the loop proceeds directly to the next iteration.

9) Write python program that swap two number with temp variable
and without temp variable
"""

input_number1=int(input("enter the number1"))
input_number2=int(input("enter the number2"))
temp=input_number1
input_number1=input_number2
input_number2=temp
print(input_number1)

"""10) Write a Python program to find whether a given number is even
or odd, print out an appropriate message to the user.
"""

input_number=int(input("enter the number"))
if input_number%2==0:
  print("even")
else:
  print("odd")

"""11) Write a Python program to test whether a passed letter is a vowel
or not.
"""

input_letter=input("enter the letter")
if input_letter=="a" or input_letter=="e" or input_letter=="i" or input_letter=="o" or input_letter=="u":
  print("vowel")
else:
  print("not vowel")

"""12) Write a Python program to sum of three

*   List item
*   List item

given integers. However, if
two values are equal sum will be zero.
"""

def sum_with_check(a, b, c):
  if a == b or a == c or b == c:
    return
  else:
    return a + b + c
print(sum_with_check(1, 2, 3))
print(sum_with_check(3, 2, 2))

"""13) Write a Python program that will return true if the two given
integer values are equal or their sum or difference is 5.
"""

num1=int(input("enter the number1"))
num2=int(input("enter the number2"))
if num1==num2 or num1+num2==5 or num1-num2==5:
  print("true")
else:
  print("false")

"""14)Write a python program to sum of the first n positive integers.

"""

n = int(input("Enter a positive integer: "))
sum = 0
for i in range(1, n + 1):
  sum += i
print("The sum of the first", n, "positive integers is:", sum)

"""15)Write a Python program to calculate the length of a string"""

string = input("Enter a string: ")
length = 0
for char in string:
  length += 1
print("The length of the string is:", length)

"""16) Write a Python program to count the number of characters
(character frequency) in a string
"""

string = input("Enter a string: ")
char_frequency = {}
for char in string:
  if char in char_frequency:
    char_frequency[char] += 1
  else:
    char_frequency[char] = 1
print("Character frequency:", char_frequency)

"""17)What are negative indexes and why are they used?

Negative indexing allows you to access elements of a sequence from the end, using negative numbers as indexes. This can be useful for getting the last few elements of a sequence, reversing a sequence, or performing other operations that require accessing elements from the end.

18)Write a Python program to count occurrences of a substring in a string.
"""

string = input("Enter the main string: ")
substring = input("Enter the substring to count: ")
count = string.count(substring)
print("The substring occurs", count, "times in the main string.")

"""19) Write a Python program to count the occurrences of each word in a
given sentence
"""

sentence = input("Enter a sentence: ")
word_counts = {}
words = sentence.lower().split()
for word in words:
  if word in word_counts:
    word_counts[word] += 1
  else:
    word_counts[word] = 1
print("Word counts:", word_counts)

"""20) Write a Python program to get a single string from two given strings,
separated by a space and swap the first two characters of each string.
"""

string1 = input("Enter the first string: ")
string2 = input("Enter the second string: ")
new_string1 = string2[:2] + string1[2:]
new_string2 = string1[:2] + string2[2:]
result = new_string1 + " " + new_string2
print(result)

"""21) Write a Python program to add 'in' at the end of a given string (length
should be at least 3). If the given string already ends with 'ing' then
add 'ly' instead if the string length of the given string is less than 3,
leave it unchanged.
"""

string = input("Enter a string: ")

if len(string) >= 3:
    if string.endswith('ing'):
        string += 'ly'
    else:
        string += 'in'

print(string)

"""22) Write a Python function to reverses a string if its length is a multiple
of 4.
"""

def reverse_string(s):
  if len(s) % 4 == 0:
    return s[::-1]
  else:
    return s
string1 = "hello"
string2 = "hare"
print(reverse_string(string1))
print(reverse_string(string2))

"""23) Write a Python program to get a string made of the first 2 and the last
2 chars from a given a string. If the string length is less than 2, return
instead of the empty string.

"""

def get_string(s):
  if len(s) < 2:
    return ''
  return s[0:2] + s[-2:]  # Simplified concatenation
string1 = "Hello"
string2 = "hii"
string3 = "hi"
print(get_string(string1))
print(get_string(string2))
print(get_string(string3))

"""24)Write a Python function to insert a string in the middle of a string."""

def insert_string_middle(main_string, insert_string):
  middle = len(main_string) // 2
  return main_string[:middle] + insert_string + main_string[middle:]

# Example usage (same as before)
result1 = insert_string_middle("{{}}", "Python")
result2 = insert_string_middle("hare", "12")
print(result1)
print(result2)

"""25)What is List? How will you reverse a list?

A list is a data structure in Python that is a mutable, or changeable, ordered sequence of elements. Each element or value that is inside of a list is called an item. Just as strings are defined as characters between quotes, lists are defined by having values between square brackets [ ] .
reverse list syntax: [: :-1]

26)How will you remove last object from a list?

The method pop() can be used to remove and return the last value from the list or the given index value. If the index is not given, then the last element is popped out and removed

27)Suppose list1 is [2, 33, 222, 14,25], what

1.   List item
2.   List item

is list1 [-
1]?
"""

list1 = [2, 33, 222, 14, 25]
print(list1[-1])

"""28)Differentiate between append () and extend () methods?

The append() method adds a single element to the end of the list while the extend() method adds all the elements of an iterable to the end of the list

29) Write a Python function to get the largest number, smallest num
and sum of all from a list.
"""

def analyze_list(numbers):
  largest = numbers[0]
  smallest = numbers[0]
  total_sum = 0

  for number in numbers:
    if number > largest:
      largest = number
    if number < smallest:
      smallest = number
    total_sum += number

  return largest, smallest, total_sum
numbers = [12, 45, 2, 89, 33]
largest_num, smallest_num, sum_of_all = analyze_list(numbers)
print("Largest number:", largest_num)
print("Smallest number:", smallest_num)
print("Sum of all numbers:", sum_of_all)

"""30)How will you compare two lists?

Equality Operator (==): The == operator checks if the elements and their order are the same in both lists.
Output: The comparison returns True if the lists are identical and False otherwise.
"""

#1. Checking for Equality:
list1 = [1, 2, 3]
list2 = [1, 2, 3]
print(list1 == list2)

# Checking for Subsets or Supersets:
list1 = [1, 2, 3]
list2 = [2, 3]
print(set(list1).issubset(set(list2)))
print(set(list2).issuperset(set(list1)))

list1 = [1, 2]
list2 = [3, 4]
print(list1 < list2)

"""31) Write a Python program to count the number of strings where the string
length is 2 or more and the first and last character are same from a given list
of strings.
"""

string_list = ['abc', 'xyz', 'aba', '1221', 'aa']
count = 0

for string in string_list:
  if len(string) >= 2 and string[0] == string[-1]:
    count += 1

print("Number of matching strings:", count)

"""32)Write a Python program to remove duplicates from a list.

del list
my_list = [25,35,40,35,55,45]
unique_list = list(set(my_list))  # Now this should work correctly
print(unique_list)

"""

my_list = [25, 35, 40, 35, 55, 45]
unique_list = list(set(my_list))
print(unique_list)

"""33)Write a Python program to check a list is empty or not."""

my_list = []  # Example empty list

if not my_list:
  print("The list is empty.")
else:
  print("The list is not empty.")

"""34) Write a Python function that takes two lists and returns true if they
have at least one common member.
"""

def has_common_member(list1, list2):
  for element in list1:
    if element in list2:
      return True
  return False
list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 1]
result = has_common_member(list1, list2)
print(result)

"""35) Write a Python program to generate and print a list of first and last 5
elements where the values are square of numbers between 1 and 30.

"""

# Generate squares of numbers between 1 and 30
squares = [x**2 for x in range(1, 31)]
first_five = squares[:5]
last_five = squares[-5:]
print("First five squares:", first_five)
print("Last five squares:", last_five)

"""36) Write a Python function that takes a list and returns a new list with
unique elements of the first list.

"""

def unique_elements(input_list):
  return list(set(input_list))

# Example usage
my_list = [1, 2, 2, 3, 4, 4, 5]
unique_list = unique_elements(my_list)
print(unique_list)  # Output: [1, 2, 3, 4, 5]

"""37)Write a Python program to convert a list of characters into a string."""

char_list = ['H', 'e', 'l', 'l', 'o']
string = ''.join(char_list)
print(string)

"""38)Write a Python program to select an item randomly from a list"""

import random

my_list = [10, 20, 30, 40, 50]
random_item = random.choice(my_list)
print("Randomly selected item:", random_item)

"""39)Write a Python program to find the second smallest number in a list."""

def second_smallest(numbers):
  if len(numbers) < 2:
    return None
  smallest = min(numbers[0], numbers[1])
  second_smallest = max(numbers[0], numbers[1])

  for number in numbers[2:]:
    if number < smallest:
      second_smallest = smallest
      smallest = number
    elif number < second_smallest and number != smallest:
      second_smallest = number

  return second_smallest
numbers = [5, 2, 8, 1, 9, 3]
result = second_smallest(numbers)
print("Second smallest number:", result)

"""40)Write a Python program to get unique values from a list

"""

my_list = [1, 2, 2, 3, 4, 4, 5]
unique_values = list(set(my_list))
print(unique_values)  # Output: [1, 2, 3, 4, 5]

"""41)Write a Python program to check whether a list contains a sub list"""

main_list = [1, 2, 3, 4, 5]
sub_list = [3, 4]

if all(item in main_list for item in sub_list):
  print("The main list contains the sublist.")
else:
  print("The main list does not contain the sublist.")

"""42)Write a Python program to split a list into different variables"""

my_list = [10, 20, 30, 40, 50]

var1, var2, var3, var4, var5 = my_list

print(var1)
print(var2)
print(var3)
print(var4)
print(var5)

"""43)What is tuple? Difference between list and tuple

In python tuple they are very similar to list.however,unlike list they are imutable meaning that they can not be change.list is a mutable,order of a elements.list are changeable element can be modify after list is created.tuple are very similar to list but tuple are imutable they can not be change.

Write a Python program to create a tuple with different data types.
"""

my_tuple = (10, "Hello", 3.14, True)
print(my_tuple)

"""45)Write a Python program to unzip a list of tuples into individual lists"""

list_of_tuples = [(1, 'a'), (2, 'b'), (3, 'c')]
list1, list2 = zip(*list_of_tuples)

print(list(list1))
print(list(list2))

"""46)Write a Python program to convert a list of tuples into a dictionary."""

list_of_tuples = [("apple", 1), ("banana", 2), ("cherry", 3)]
my_dict = dict(list_of_tuples)
print(my_dict)

"""47)How will you create a dictionary using tuples in python?

"""

tuple_list = [("name", "Alice"), ("age", 25), ("city", "New York")]
my_dict = dict(tuple_list)
print(my_dict)

"""48)Write a Python script to sort (ascending and descending) a
dictionary by value.
"""

my_dict = {'apple': 3, 'banana': 1, 'cherry': 2}

# Ascending order
sorted_dict_asc = dict(sorted(my_dict.items(), key=lambda item: item[1]))
print("Ascending order:", sorted_dict_asc)
# Descending order
sorted_dict_desc = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True))
print("Descending order:", sorted_dict_desc)

"""49)Write a Python script to concatenate following dictionaries to create
a new one.
"""

my_dict1 = {"name":"jay","age":"30","gender":"male","address":"ahmedabad"}
my_dict2 = {1:2,2:5,3:10,4:15,5:20}
my_dict3 = {6:30,7:45,8:50,9:55,10:60}
new_dict = {}

for d in (my_dict1, my_dict2, my_dict3):
  new_dict.update(d)

print(new_dict)

"""50)Write a Python script to check if a given key already exists in a
dictionary

my_dict = {"x":1, "y":2, "z":3}
key_to_check = "m"
"""

my_dict = {"x":1, "y":2, "z":3}
key_to_check = "m"
if key_to_check in my_dict:
  print("Key exists")
else:
  print("Key does not exist")

"""my_dict = {'a': 1, 'b': 2, 'c': 3}
     for key in my_dict:
         print(key, my_dict[key])
"""

my_dict = {'a': 1, 'b': 2, 'c': 3}
for key in my_dict:
    print(key, my_dict[key])

"""51)How Do You Traverse Through a Dictionary Object in Python?"""

my_dict = {"name":"hareshree","age":"25","gender":"female","address":"ahmedabad"}
for key,value in my_dict.items():
  print(key,value)

"""52)How Do You Check the Presence of a Key in A Dictionary?"""

my_dict = {'a': 1, 'b': 2, 'c': 3}
key_to_check = 'b'
if key_to_check in my_dict:
  print("Key exists")
else:
  print("Key does not exist")

"""53)Write a Python script to print a dictionary where the keys are
numbers between 1 and 15.

"""

def check_multiple_keys(my_dict, keys_to_check):
  return all(key in my_dict for key in keys_to_check)

# Example usage
my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
keys1 = ['a', 'c', 'e']
keys2 = ['b', 'd']

print(check_multiple_keys(my_dict, keys1))  # Output: False (key 'e' is missing)
print(check_multiple_keys(my_dict, keys2))  # Output: True

"""54)Write a Python program to check multiple keys exists in a dictionary"""

my_dict = {num: num**2 for num in range(1, 16)}
print(my_dict)

"""55)Write a Python script to merge two Python dictionaries"""

dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

merged_dict = dict1.copy()
merged_dict.update(dict2)

print(merged_dict)

"""56)Write a Python program to map two lists into a dictionary
Sample output: Counter ({'a': 400, 'b': 400,’d’: 400, 'c': 300}).
"""

keys = ['a', 'b', 'c', 'd']
values = [400, 400, 300, 400]

result_dict = dict(zip(keys, values))
print(result_dict)  # Output: {'a': 400, 'b': 400, 'c': 300, 'd': 400}

"""57)Write a Python program to find the highest 3 values in a dictionary"""

my_dict = {'a': 10, 'b': 30, 'c': 20, 'd': 50, 'e': 40}

top_3_values = sorted(my_dict.values(), reverse=True)[:3]
print("Highest 3 values:", top_3_values)  # Output: Highest 3 values: [50, 40, 30]

"""58)Write a Python program to combine values in python list of dictionaries.
Sample data: [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount':
300}, o {'item': 'item1', 'amount': 750}]
Expected Output:
• Counter ({'item1': 1150, 'item2': 300})
"""

from collections import Counter

data = [{'item': 'item1', 'amount': 400}, {'item': 'item2', 'amount': 300}, {'item': 'item1', 'amount': 750}]
result = Counter()

for item in data:
  result[item['item']] += item['amount']

print(result)  # Output: Counter({'item1': 1150, 'item2': 300})

"""59)Write a Python program to create a dictionary from a string.
Note: Track the count of the letters from the string.

"""

my_string = "hello world"
char_counts = {}

for char in my_string:
  if char in char_counts:
    char_counts[char] += 1
  else:
    char_counts[char] = 1

print(char_counts)

"""0)Sample string:
 'w3resource' Expected output:
• {'3': 1,’s’: 1, 'r': 2, 'u': 1, 'w': 1, 'c': 1, 'e': 2, 'o': 1}
"""

my_string = 'w3resource'
char_counts = {}

for char in my_string:
  if char in char_counts:
    char_counts[char] += 1
  else:
    char_counts[char] = 1

print(char_counts)

"""61)Write a Python function to calculate the factorial of a number (a
nonnegative integer)
"""

def factorial(n):
  if n == 0:
    return 1
  else:
    return n * factorial(n - 1)

# Example usage
num = 5
result = factorial(num)
print(f"The factorial of {num} is {result}")

"""62)Write a Python function to check whether a number is in a given range"""

def in_range(number, start, end):
  return start <= number <= end

# Example usage
num1 = 25
range_start = 10
range_end = 50
result1 = in_range(num1, range_start, range_end)
print(f"{num1} is in range [{range_start}, {range_end}]: {result1}")  # Output: 25 is in range [10, 50]: True

num2 = 5
result2 = in_range(num2, range_start, range_end)
print(f"{num2} is in range [{range_start}, {range_end}]: {result2}")  # Output: 5 is in range [10, 50]: False

"""63)Write a Python function to check whether a number is perfect or not."""

def is_perfect_number(number):
  if number <= 1:
    return False

  sum_divisors = 1
  for i in range(2, int(number**0.5) + 1):
    if number % i == 0:
      sum_divisors += i + number // i

  return sum_divisors == number

num1 = 6
result1 = is_perfect_number(num1)
print(f"{num1} is a perfect number: {result1}")

num2 = 28
result2 = is_perfect_number(num2)
print(f"{num2} is a perfect number: {result2}")
num3 = 15
result3 = is_perfect_number(num3)
print(f"{num3} is a perfect number: {result3}")

"""64)Write a Python function that checks whether a passed string is
palindrome or not

"""

def is_palindrome(text):
  processed_text = ''.join(c for c in text.lower() if c.isalnum())
  return processed_text == processed_text[::-1]

# Example usage
string1 = "madam"
result1 = is_palindrome(string1)
print(f"'{string1}' is a palindrome: {result1}")
string2 = "racecar"
result2 = is_palindrome(string2)
print(f"'{string2}' is a palindrome: {result2}")

string3 = "apple"
result3 = is_palindrome(string3)
print(f"'{string3}' is a palindrome: {result3}")

"""65)How Many Basic Types of Functions Are Available in Python?

Built-in Functions:
These are pre-defined functions readily available in Python. Examples include print(), len(), range(), and type().
User-defined Functions:
These are functions created by the user to perform specific tasks. They are defined using the def keyword

66)How can you pick a random item from a list or tuple?
"""

my_list = [1,2,3,4,5]
import random
print(random.choice(my_list))

"""67)How can you pick a random item from a range?'''

"""

import random
random_number = random.randint(1,10)
print(random_number)

"""68)How can you get a random number in python?"""

import random
random_number = random.random()
print(random_number)

"""69)How will you set the starting value in generating random numbers?

Import the random Module: Start by importing the random module, which provides tools for generating random numbers.

Use the seed() Function: The random.seed(value) function initializes the random number generator with a specific value. This ensures that the sequence of random numbers generated is reproducible.

Choosing a Seed: The seed can be any integer or hashable object. Common choices include a specific number, system time, or a value derived from external sources

How will you randomize the items of a list in place?
"""

my_list = [1,2,3,4,5]
random.shuffle(my_list)
print(my_list)

"""71)What is File function in python? What are keywords to create
and write file.

In Python, you don't have a single "File function". Instead, you interact with files using built-in functions and methods.

To create and write to a file, you'll primarily use these keywords and functions:

1. open(): This function is used to open a file and returns a file object. The key is to use the right mode when opening:
2. write(): This method of a file object is used to write a string to the file.

3. close(): It's essential to close the file object after you're done writing to it to ensure that all changes are saved and resources are released.
"""

